#!/usr/bin/env php
<?php

// Find and initialize Composer
$composerAutoloadFile = array(
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../../../../autoload.php',
    __DIR__ . '/../../../../../autoload.php',
);
foreach ($composerAutoloadFile as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

if (!class_exists('Composer\Autoload\ClassLoader', false)) {
    $errorMessage = <<<ERROR
You need to set up the project dependencies using the following commands:
curl -s http://getcomposer.org/installer | php
php composer.phar install
ERROR;
    die($errorMessage);
}

$QUEUE = getenv('QUEUE');
if (empty($QUEUE)) {
    die("Set QUEUE env var containing the list of queues to work.\n");
}
$queues = explode(',', $QUEUE);

$REDIS_BACKEND = getenv('REDIS_BACKEND');
if (!empty($REDIS_BACKEND)) {
    $REDIS_BACKEND_DB = getenv('REDIS_BACKEND_DB');

    Resque::setBackend($REDIS_BACKEND, empty($REDIS_BACKEND_DB) ? 0 : $REDIS_BACKEND_DB);
}

$LOGGING  = getenv('LOGGING');
$VERBOSE  = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
$logLevel = !empty($LOGGING) || !empty($VERBOSE) || !empty($VVERBOSE);

$APP_INCLUDE = getenv('APP_INCLUDE');
if ($APP_INCLUDE) {
    if (!file_exists($APP_INCLUDE)) {
        die('APP_INCLUDE ('.$APP_INCLUDE.") does not exist.\n");
    }

    require $APP_INCLUDE;
}

// See if the APP_INCLUDE contains a logger object,
// If none exists, fallback to internal logger
if (!isset($logger) || !is_object($logger)) {
    $logger = new Resque_Log($logLevel);
}

$BLOCKING = getenv('BLOCKING') !== false;

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
    $interval = $INTERVAL;
}

$kernel = null;

$workerClass = 'Instasent\ResqueBundle\WorkerBase';
if (getenv('APP_KERNEL')) {
    $symfonyKernelFile = getenv('APP_KERNEL');

    $kernelClass = basename($symfonyKernelFile, '.php');
    if (preg_match('/^namespace\s+([A-Za-z0-9\\\\_-]+)\s*;$/m', file_get_contents($symfonyKernelFile), $matches)) {
        $kernelClass = $matches[1] . '\\' . $kernelClass;
    }

    require $symfonyKernelFile;

    if (!class_exists($kernelClass, false)
        || !in_array('Symfony\Component\HttpKernel\KernelInterface', class_implements($kernelClass))
    ) {
        die('APP_KERNEL ('.$symfonyKernelFile.") does not contain a Symfony Kernel class.\n");
    }

    $SYMFONY_ENV = getenv('SYMFONY_ENV');

    /* @var Symfony\Component\HttpKernel\KernelInterface $kernel */
    $kernel = new $kernelClass((string) $SYMFONY_ENV, false);
    $kernel->boot();

    if (getenv('LOG_CHANNEL')) {
        $logger = $kernel->getContainer()->get(getenv('LOG_CHANNEL'));
    }

    if (getenv('WORKER_CLASS')) {
        $workerClass = getenv('WORKER_CLASS');

        if (!class_exists($workerClass) || !is_subclass_of($workerClass, 'Instasent\ResqueBundle\WorkerBase')) {
            $logger->log(Psr\Log\LogLevel::ERROR, 'Worker {worker} is not of the right kind', array('worker' => $workerClass));
            die();
        }
    }
}

$count = 1;
$COUNT = getenv('COUNT');
if (!empty($COUNT)) {
    if ($COUNT < 1) {
        $logger->log(Psr\Log\LogLevel::ERROR, 'Workers count must be higher than 0');
        die();
    }

    $count = $COUNT;
}

$PREFIX = getenv('PREFIX');
if (!empty($PREFIX)) {
    $logger->log(Psr\Log\LogLevel::INFO, 'Prefix set to {prefix}', array('prefix' => $PREFIX));
    Resque_Redis::prefix($PREFIX);
}

// If set, re-attach failed jobs based on retry_strategy
Resque_Event::listen('onFailure', function(Exception $exception, Resque_Job $job) use ($logger) {
    $args = $job->getArguments();

    if (empty($args['bcc_resque.retry_strategy'])) {
        return;
    }

    if (!isset($args['bcc_resque.retry_attempt'])) {
        $args['bcc_resque.retry_attempt'] = 0;
    }

    $backoff = $args['bcc_resque.retry_strategy'];
    if (!isset($backoff[$args['bcc_resque.retry_attempt']])) {
        return;
    }

    $delay = $backoff[$args['bcc_resque.retry_attempt']];
    $args['bcc_resque.retry_attempt']++;

    if ($delay == 0) {
        Resque::enqueue($job->queue, $job->payload['class'], $args);
        $logger->log(Psr\Log\LogLevel::ERROR, 'Job failed. Auto re-queued, attempt number: {attempt}', array(
            'attempt' => $args['bcc_resque.retry_attempt'] - 1)
        );
    } else {
        $at = time() + $delay;
        ResqueScheduler::enqueueAt($at, $job->queue, $job->payload['class'], $args);
        $logger->log(Psr\Log\LogLevel::ERROR, 'Job failed. Auto re-queued. Scheduled for: {timestamp}, attempt number: {attempt}', array(
            'timestamp' => date('Y-m-d H:i:s', $at),
            'attempt'   => $args['bcc_resque.retry_attempt'] - 1,
        ));
    }
});

if ($count > 1) {
    for ($i = 0; $i < $count; ++$i) {
        $pid = Resque::fork();

        if ($pid == -1) {
            $logger->log(Psr\Log\LogLevel::EMERGENCY, 'Could not fork worker {count}', array('count' => $i));
            die();
        }

        if (!$pid) {
            /* @var Instasent\ResqueBundle\WorkerBase $worker */
            $worker = $kernel !== null
                ? $kernel->getContainer()->get($workerClass)
                : new $workerClass(array());
            $worker->setId($worker->__toString().implode(',', $queues));
            $worker->setQueues($queues);
            $worker->setLogger($logger);

            $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
            $worker->work($interval, $BLOCKING);
            break;
        }
    }
} else {
    /* @var Instasent\ResqueBundle\WorkerBase $worker */
    $worker = $kernel !== null
        ? $kernel->getContainer()->get($workerClass)
        : new $workerClass(array());
    $worker->setId($worker->__toString().implode(',', $queues));
    $worker->setQueues($queues);
    $worker->setLogger($logger);

    $PIDFILE = getenv('PIDFILE');
    if ($PIDFILE) {
        file_put_contents($PIDFILE, getmypid()) or
            die('Could not write PID information to ' . $PIDFILE);
    }

    $logger->log(Psr\Log\LogLevel::NOTICE, 'Starting worker {worker}', array('worker' => $worker));
    $worker->work($interval, $BLOCKING);
}
